2021-02-24
1：case判断：若无遇到break会一直执行到大括号结束为止
2: 线程：run是线程执行的入口，start是启动该线程的方法。若无start使进程处于就绪态，那run只是普通方法
3：继承：单继承，但是可以实现多个接口
4：final： 	final成员变量必须在声明的时候初始化或者在构造器中初始化，否则就会报编译错误
			不能对final重新赋值
			final的本地变量必须在声明时赋值
			在匿名类中所有变量都必须是final
			final类不能继承
			final修饰的方法可以被继承和重载，但不能被重写，对于子类是隐藏的
			final修饰的变量不能被修改，是个常量
5： +、-、*、/、%、运算操作
			两个操作数中有一个是double类型的，另一个将会被转换成double类型
			两个操作数中有一个是float类型的，另一个将会被转换为float类型
			两个操作数中有一个是long类型的，另一个将会被转换成long类型
			操作数为：byte、short、int 、char：两个数都会被转换成int类型，并且结果也是int类型
6：强引用/软引用/弱引用/虚引用
	强：显示的对象定义，不会被回收，除非显示定义为null
	软：SoftReference，除非内存不够
	弱：WeakReference，只要jvm开始进行gc
	虚：PhantomReference，和ReferenceQueue 引用队列一起使用，随时可能被回收
	
20200225
7：	静态代码块优先于主方法，且只在加载类时运行一次
8： javac编译；javah生成c++头文档；javadoc生成解释API文档；jar；打包
9： 子类不可见父类的private方法，且不能重写父类的final方法

20200226
10：volatile关键字保证变量的可见性，但无法保证原子性。如果值发生了变更，其他线程马上看到，避免拿到脏数据

20200228
11：lamdba表达式
	1：实现接口的方式
		public interface Interface_name{
			方法名；（参数，返回值的限制）
		}
		调用：
		Interface_name element = (参数) -> {方法体}
	2：实现已经写好的方法（其实就是用已经实现的方法来作为方法体内容）
		静态方法：通过 Interface_name element = 静态方法所属的类名：：静态方法名
			note:静态方法/普通方法与该接口方法对应的参数和返回类型一致
		普通方法：通过 Interface_name element = 实例名：：普通方法名
	3：构造方法的引用没看懂
	4：lamdba创建线程
		Thread t = new Thread(()->{
		//方法体
		})；
		t.start();
	5：集合的遍历，待学习
	6：闭包问题：普通变量在lamdba中使用后会在编译期间被赋予final关键字，不能在lamdba外更改
		